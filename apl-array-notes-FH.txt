APL arrays in Haskell
~~~~~~~~~~~~~~~~~~~~~

data Array elt     -- Would force uniform element types

* Need rank-zero arrays

* In a rank-3 arrary, any of the axes can have zero length
    e.g. (3 x 0 x 4) array  /= (0 x 0 x 4) array

* Prototypical item?  Leave open for now.  A minefield.


Major question: should the rank be visible in the type at all?

Plan A:         data Array elt   
Plan (Succ A):  data Array rank elt


APL controversy
~~~~~~~~~~~~~~~
[2 3]  = a vector 
[2 3]  = ravel (enclose 2) `catenate` ravel (enclose 3)

Plan A
~~~~~~

   data Array a  -- Rectangular!

   type Scalar a = Array a   -- Rank 0, length 1
   type Vector a = Array a   -- Rank 1!
   type Matrix a = Array a   -- Rank 2!
   type Axis = Nat
 
   -- Arrays can be added, multiplied, etc
   class Num a where
     (+) :: Num a => a -> a -> 

   instance Num a => Num (Array a) where ..


    -- A rank-0 array contains one item
   zilde   :: Vector a       -- Empty vector, rank 1
   enclose :: a -> Scalar a  -- Returns a rank 0 array, of
                             -- depth one greater than input

   iota :: Nat -> Array Nat  -- iota n = [1 2 3 ... n]

   ravel :: Array a -> Vector a  -- Flattens an array of arbitrary rank
                                 -- (including zero!) in row-major order
                                 -- Does not change depth

   reshape :: Vector Nat    -- s: the shape
           -> Array a       -- Arbitrary shape    
           -> Array a       -- Shape of result = s
   -- NB: ravel a = product (shape a) `reshape` a

   product  :: Num a => a -> Array a -> Array a
   productA :: Num a => Axis -> a -> Array a -> Array a
    -- Result has rank one smaller than input

  shape :: Array a -> Vector Nat
  --  shape [[1 3] [5 2] [3 9]] = [3 2]
  --  shape [3 2] = [2] 
  --  shape [2]   = [1] 

  -- rank = shape . shape  -- Rank 1 and shape [1] 
  -- Or we could have rank :: Array a -> Nat

  rankOperator :: ??
  -- This is in J and it is somehow lovely in a way 
  -- that ordinary mortals cannot understand
  -- rankOp 1 (+) A B

  class Item a wher
    depth :: a -> Nat

  instance Item Float where
    depth _ = 0
  instance Item a => Item (Array a) where
    depth _ = 1 + depth (undefined :: a)


  catenate :: Array a -> Array a -> Array a
  -- Concatenates on last axis (or first in J)
  -- Checks for shape compatibility
  catenateA :: Axis -> Array a -> Array a -> Array a
  --  You can specify the axis

  -- Swapping rank with depth
  flatten :: Vector (Vector a) -> Array a

  vector :: [a] -> Vector a

  each :: (a -> b) -> Array a -> Array b

  simpleIndex   -- m [a;b]
    :: Array a            -- a: The array to index
    -> Vector (Array Nat) -- i: Outer array is a tuple
                          --    of length = rank a
    -> Array a            -- shape result = shape i[0] x shape i[1] ....


  -- simpleIndex a (vector [enclose 3, enclose 4]) :: Array a  (rank 0)
  --  mat [3 ; 4]

  chooseIndex   -- m [b]
     :: Array a            -- a: The array to index
     -> Array (Vector Nat) -- i: Inner arrays are the index tuples
                           --    of length = rank a
     -> Array a            -- shape result = shape i

mat [3 ; 4]
  3 : rank 0, shape is zilde
  4 : ditto
  [3 ; 4] : rank 1, shape [2]

--------------------
Various monomorphic pick operators
  pick1 :: Vector (Matrix (Vector a))
       -> Array (Nat, (Nat,Nat), Nat)
       -> Array a
   
  pick2 :: Vector (Matrix a)
        -> Array (Nat, (Nat,Nat))
        -> Array a
   
  -- Just an instance of pick2
  pick2 :: Vector (Matrix (Vector a))
        -> Array (Nat, (Nat,Nat))
        -> Array (Vector a)
   

--------------------
Canonical implementation
~~~~~~~~~~~~~~~~~~~~~~~~

data Array a = Arr Shape [a] 
type Shape = [Nat]
-- Invariant: Arr s xs: product s = length xs

ravel :: Array a -> Vector a
ravel (Arr s a) = Arr [product s] a

zilde :: Vector a       -- Empty vector, rank 1
zilde = Arr [0] []

enclose :: a -> Scalar a  -- Returns a rank 0 array, of
                          -- depth one greater than input
enclose x = Arr [] [x]

shape :: Array a -> Vector Nat
shape (Arr s a) = Arr [1] s

reshape :: Vector Nat    -- s: the shape
        -> Array a       -- Arbitrary shape    
        -> Array a       -- Shape of result = s
reshape (Arr [n] s) (Arr s' elts)
  | null elts = error "Reshape on empty array"
  | otherwise
  = Arr s (take (product s) (cycle elts))

each :: (a -> b) -> Array a -> Array b
each f (Arr s xs) = Arr s (map f xs)